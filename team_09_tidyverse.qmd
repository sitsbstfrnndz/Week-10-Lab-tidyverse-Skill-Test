---
title: "team_09_tidyverse"
format: 
  html:
    toc: true
    toc_depth: true
    embed-resources: true
editor: visual
---

```{r, include=FALSE}
library(tidyverse)
library(gt)
```

``` r
library(tidyverse)
library(gt)
```

# Task 1: Converting EPL Football Results into a League Table

```{r setup, include=TRUE}
# Set CRAN mirror non-interactively
options(repos = c(CRAN = "https://cran.rstudio.com/"))

# Install and load the tidyverse package
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}

library(tidyverse)
library(gt)

# Read the CSV files into tibbles
epl_results <- read_csv("data/epl/epl_results.csv")
epl_teams <- read_csv("data/epl/epl_teams.csv")

# Print the datasets to verify
print(epl_results)
print(epl_teams)

```

## 1.1 Generate a League Table from the EPL Results

```{r include=TRUE}
# Convert match results to points, goal difference, and goals scored
results_long <- epl_results %>%
  pivot_longer(cols = -home_team, names_to = "away_team", values_to = "result") %>%
  filter(result != "-") %>%
  separate(result, into = c("home_goals", "away_goals"), sep = "-", convert = TRUE) %>%
  mutate(
    home_points = case_when(
      home_goals > away_goals ~ 3,
      home_goals < away_goals ~ 0,
      TRUE ~ 1
    ),
    away_points = case_when(
      home_goals > away_goals ~ 0,
      home_goals < away_goals ~ 3,
      TRUE ~ 1
    ),
    home_goal_diff = home_goals - away_goals,
    away_goal_diff = away_goals - home_goals
  )

# Compute statistics for home and away teams
home_stats <- results_long %>%
  group_by(home_team) %>%
  summarize(
    points = sum(home_points),
    goal_diff = sum(home_goal_diff),
    goals_for = sum(home_goals),
    goals_against = sum(away_goals)
  ) %>%
  left_join(epl_teams, by = c("home_team" = "abbr")) %>%
  rename(team = name)

# Compute statistics for away teams
away_stats <- results_long %>%
  group_by(away_team) %>%
  summarize(
    points = sum(away_points),
    goal_diff = sum(away_goal_diff),
    goals_for = sum(away_goals),
    goals_against = sum(home_goals)
  ) %>%
  left_join(epl_teams, by = c("away_team" = "abbr")) %>%
  rename(team = name)

# Combine home and away statistics and compute the final league table
league_table <- home_stats %>%
  select(team, points, goal_diff, goals_for, goals_against) %>%
  bind_rows(away_stats %>% select(team, points, goal_diff, goals_for, goals_against)) %>%
  group_by(team) %>%
  summarize(
    points = sum(points),
    goal_diff = sum(goal_diff),
    goals_for = sum(goals_for)
  ) %>%
  arrange(desc(points), desc(goal_diff), desc(goals_for)) %>%
  mutate(rank = row_number()) %>%
  select(rank, team, points, goal_diff, goals_for)

# Print the league table
print(league_table)

```

## 1.2 Improve Visualization Using `gt` Functions

```{r}
# Improve the visualization of the league table using gt
league_table %>%
  gt() %>%
  tab_header(
    title = md("English Premier League 2019-2020 Season League Table")
  ) %>%
  data_color(
    columns = c(points, goal_diff, goals_for),
    fn = scales::col_numeric(
      palette = c("red", "yellow", "green"),
      domain = NULL
    )
  ) %>%
  cols_label(
    rank = "Rank",
    team = "Team",
    points = "Points",
    goal_diff = "Goal Difference",
    goals_for = "Goals For"
  ) %>%
  tab_options(
    table.font.names = "Arial",
    table.font.size = 12,
    table.background.color = "white",
    heading.title.font.size = 16,
    heading.title.font.weight = "bold"
  )
```

In the improved visualization, we:

-   **Added a Title**:
    -   The title "English Premier League 2019-2020 Season League Table" clearly indicates the table's content.
-   **Colored Columns**:
    -   **Points Column**: Applied a gradient from red (low points) to green (high points) to highlight team performance.
    -   **Goal Difference (goal_diff) Column**: Used a gradient from red (negative goal difference) to green (positive goal difference) to indicate defensive performance.
    -   **Goals For (goals_for) Column**: Implemented a gradient from red (low goals) to green (high goals) to indicate offensive performance.
-   **Styled the Table**:
    -   Utilized the Arial font for improved readability.
    -   Adjusted font sizes to enhance clarity and visual appeal.

# Task 2: Finding and Visualizing a Real-World Dataset

## 2.1 Use R Code to Validate Conditions C, D, and E for Your Data

**Loading the Dataset**

```{r}
# Load the dataset from local file
student_data <- read.csv("data/student-mat.csv", header = TRUE, sep = ";")
```

This data ([Source](https://archive.ics.uci.edu/ml/datasets/Student+Performance)) approaches student achievement in secondary education (math) of two Portuguese schools. The data attributes include student grades, demographic, social, and school-related features, and it was collected by using school reports and questionnaires.

### Condition C: Validating Condition: More than 200 Observations

```{r}
# Validate condition: More than 200 observations
num_observations <- nrow(student_data)
cat("Number of observations:", num_observations, "\n")
```

### Condition D: Validating Condition: Continuous Numerical Data

```{r}
# Validate condition: Continuous numerical data
quant_vars <- student_data |>
  select(where(is.numeric)) |>
  names()
cat("Quantitative variables:", paste(quant_vars, collapse = ", "), "\n")
```

### Condition E: Validating Condition: At Least Two Groups with Roughly Balanced Observations

```{r}
# Validate condition: At least two groups with roughly balanced observations
group_counts <- student_data |>
  group_by(school) |>
  summarise(count = n()) |>
  arrange(desc(count))

group_counts
```

### Drop the extra rows to make the dataset less than 200 and also more balanced

```{r}
library(dplyr)

# Define the desired number of observations per group to make the total < 200
target_per_group <- 46

# Sample the data to achieve the target size for each group
balanced_data <- student_data |>
  group_by(school) |>
  sample_n(target_per_group, replace = FALSE) |>
  ungroup()

# Validate the new group counts
new_group_counts <- balanced_data |>
  group_by(school) |>
  summarise(count = n()) |>
  arrange(desc(count))

new_group_counts

# Validate the new number of observations
new_num_observations <- nrow(balanced_data)
cat("New number of observations:", new_num_observations, "\n")
```
## 2.2 Plot 1 – Generate a Histogram for One of the Quantitative Variables

<<<<<<< Updated upstream
**Creating a Basic Histogram**
=======
We check for duplicated points in the dataset, ensuring that there are pairs of data points with identical or nearly identical values. This is important for demonstrating strategies to mitigate overplotting. We also display a few rows of the duplicated points to visually confirm their presence.

#### 2.2 Plot 1 – Generate a Scatter Plot Using geom_point()

**Creating a Basic Scatter Plot**
>>>>>>> Stashed changes

```{r}
# Plot 1: Basic histogram
histogram_G1 <- balanced_data |>
  ggplot(aes(x = G1)) +
  geom_histogram(binwidth = 1, fill = "darkred", color = "black", alpha = 0.7) +
  labs(
    title = "Histogram of First Period Grades (G1)",
    x = "First Period Grade (G1)",
    y = "Frequency",
    caption = "Source: https://archive.ics.uci.edu/ml/datasets/Student+Performance"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.caption = element_text(hjust = 0)
  )

print(histogram_G1)
```

We create a basic histogram to visualize the distribution of the first period grades (G1). The bins are colored dark red with black borders and are slightly transparent to help with visibility.

## 2.3 Plot 2 – Generate a Histogram for Another Quantitative Variable

**Creating a Basic Histogram for the Final Grades**

```{r}
# Plot 2: Basic histogram for final grades
histogram_G3 <- balanced_data |>
  ggplot(aes(x = G3)) +
  geom_histogram(binwidth = 1, fill = "darkblue", color = "black", alpha = 0.7) +
  labs(
    title = "Histogram of Final Period Grades (G3)",
    x = "Final Period Grade (G3)",
    y = "Frequency",
    caption = "Source: https://archive.ics.uci.edu/ml/datasets/Student+Performance"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.caption = element_text(hjust = 0)
  )

print(histogram_G3)
```

We create a basic histogram to visualize the distribution of the final period grades (G3). The bins are colored dark blue with black borders and are slightly transparent to help with visibility.

## 2.4 Plot 3 – Overlay Histograms of Both Quantitative Variables

**Creating an Overlay Histogram**

```{r}
# Plot 3: Overlay histogram of G1 and G3
overlay_histogram <- balanced_data |>
  ggplot() +
  geom_histogram(aes(x = G1), binwidth = 1, fill = "darkred", color = "black", alpha = 0.5) +
  geom_histogram(aes(x = G3), binwidth = 1, fill = "darkblue", color = "black", alpha = 0.5) +
  labs(
    title = "Overlay Histogram of First and Final Period Grades",
    x = "Grade",
    y = "Frequency",
    caption = "Source: https://archive.ics.uci.edu/ml/datasets/Student+Performance"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.caption = element_text(hjust = 0)
  )

print(overlay_histogram)
```

We create an overlay histogram to visualize the distribution of both the first period grades (G1) and the final period grades (G3) in the same plot. This allows for comparison between the two distributions. The bins for G1 are colored dark red, and the bins for G3 are colored dark blue, both with black borders and slight transparency.

### Discussion and Insights

The histograms provide a clear view of the distribution of grades. The first period grades (G1) and the final period grades (G3) show a similar pattern, suggesting consistency in student performance throughout the course. The overlay histogram helps to compare the two distributions directly, revealing any shifts or trends in performance from the first to the final period.


# Task 3: Visualizing Michelson’s Speed-of-Light Measurements

```{r}
library(tidyverse)
data(morley)
morley <- as_tibble(morley)
morley
```

## 3.1 Convert Expt Column to Factor

```{r}
morley <- morley %>% mutate(Expt = as.factor(Expt))
morley
```

## 3.2 Plot 1 – Create a Scatter Plot displaying Experiment Number vs. Measured Speeds with plot caption and title

```{r}
scatter1 <- ggplot(morley, aes(x = factor(Expt), y = Speed)) +
  geom_point(size = 3, alpha = 0.7, color = "darkblue") +  # Larger points with adjusted transparency
  stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "red") +  # Mean points
  labs(
    title = "Scatter plot of Experiment Number vs. Measured Speeds",
    x = "Experiment Number",
    y = "Speed (in km/s minus 299,000)",
    caption = "R data set 'morley'"
  ) +
  theme_minimal() +  # Using a minimal theme for a cleaner look
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
    axis.title.x = element_text(face = "bold", size = 12),
    axis.title.y = element_text(face = "bold", size = 12),
    plot.caption = element_text(size = 8)
  )+
  coord_flip()

print(scatter1)
```

## 3.3 Plot 2 – Create a Box Plot Measured Speeds with One Box Experiment

```{r}
boxplot1 <- ggplot(morley, aes(x = factor(Expt), y = Speed, fill = factor(Expt))) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.4) +
  geom_jitter(width = 0.2, size = 1, alpha = 0.7, color = "black") +  # Adding jittered points for better visibility
  labs(
    title = "Box Plot of Measured Speeds by Experiment",
    subtitle = "Visualizing the spread and outliers of speed measurements",
    x = "Experiment Number",
    y = "Speed (km/s minus 299,000)",
    caption = "R data set 'morley'"
  ) +
  theme_minimal() +  # Using a minimal theme for a cleaner look
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
    axis.title.x = element_text(face = "bold", size = 12),
    axis.title.y = element_text(face = "bold", size = 12),
    plot.caption = element_text(size = 8)
  ) +
  scale_fill_brewer(palette = "Set2") +
  coord_flip()

print(boxplot1)
```

## 3.4 Plot 3 – Add a Violin Plot in Plot 2

```{r}

p <- ggplot(morley, aes(x = factor(Expt), y = Speed, fill = factor(Expt))) +
  geom_violin(trim = FALSE, alpha = 0.4) +  
  geom_boxplot(width = 0.1, fill = "white", colour = "black", outlier.colour = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.8) + 
  geom_jitter(width = 0.2, size = 1, alpha = 0.6, color = "black") + 
  labs(
    title = "Violin Plot of Measured Speeds by Experiment",
    x = "Experiment Number",
    y = "Speed (in km/s minus 299,000)",
    caption = "Data sourced from the Morley dataset"
  ) +
  theme_minimal() +  # Using a minimal theme for a cleaner look
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
    axis.title.x = element_text(face = "bold", size = 12),
    axis.title.y = element_text(face = "bold", size = 12),
    plot.caption = element_text(size = 8)
  ) +
  scale_fill_brewer(palette = "Set2") + 
  coord_flip() 

print(p)

```

## 3.5 Plot 4 – Create a Faceted Plot Containing 5 Histograms

```{r}
ggplot(morley, aes(x = Speed, fill = factor(Expt))) +
  geom_histogram(binwidth = 20, color = "black", alpha = 0.6) +  # Applying fill color to histograms
  facet_wrap(~Expt, scales = "free_x") +
  labs(
    title = "Histograms of Measured Speeds by Experiment",
    x = "Speed (in km/s minus 299,000)",
    y = "Count",
    caption = "R data set 'morley'"
  ) +
  theme_minimal() +  # Using a minimal theme for a cleaner look
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
    axis.title.x = element_text(face = "bold", size = 12),
    axis.title.y = element_text(face = "bold", size = 12),
    plot.caption = element_text(size = 8)
  ) +
  scale_fill_brewer(palette = "Set2")  # Using the same color palette

```

## 3.6 Discuss Your Choice Among the 4 Visualization Plots

#### 1. Plot 1 - Scatter Plot of Experiment Number vs. Measured Speeds

**Pros**:

-   **Simplicity**: Easy to understand and interpret.
-   **Individual Data Points**: Each measurement is clearly visible, helping to identify exact values.
-   **Outliers Highlighted**: Outliers are easily noticeable.

**Cons**: - **Overplotting**: Multiple data points with the same value can overlap, making it difficult to see the exact number of occurrences. - **Lack of Distribution Information**: Does not provide a clear view of the data distribution within each experiment.

#### 2. Plot 2 - Box Plot of Measured Speeds by Experiment

**Pros**: 
-   **Summarizes Data Distribution**: Clearly shows the median, quartiles, and potential outliers. 
-   **Comparison**: Makes it easy to compare the distribution across different experiments.

**Cons**: 
-   **Visual Clutter**: Can become cluttered with a large number of outliers or tightly packed data points. 
-   **Limited Distribution Detail**: Does not show the density or modality of the data within each group.

#### 3. Plot 3 - Violin Plot of Measured Speeds by Experiment

**Pros**: 
-   **Distribution Density**: Shows the density and modality of the data, providing a clear view of the distribution's shape. 
-   **Combination of Plots**: Includes elements of a box plot (median, quartiles) and individual data points, providing a comprehensive view.

**Cons**: 
-   **Visual Clutter**: Can be visually overwhelming with many elements combined. 
-   **Complexity**: May be difficult for some audiences to interpret.

#### 4. Plot 4 - Faceted Histograms of Measured Speeds by Experiment

**Pros**: 
-   **Distribution Visualization**: Clearly shows the distribution of data within each experiment. 
-   **Easy to Interpret**: Simple and straightforward, making it easy to understand the data spread.

**Cons**: 
-   **No Individual Data Points**: Does not show individual measurements. 
-   **No Summary Statistics**: Lacks a summary of the median, quartiles, and outliers.

### Best Visualization

Among the presented graphs, the **Violin Plot** stands out as the best option for comprehensively visualizing the dataset. This plot effectively combines the advantages of both violin plots and box plots, offering a detailed view of the data distribution while also providing essential summary statistics.

-   **Distribution Density**: The violin plot's smooth shapes reveal the density and modality of the data, giving an immediate sense of the distribution's spread and central tendencies.
-   **Summary Statistics**: The overlaid box plots succinctly highlight the median, quartiles, and potential outliers.
-   **Individual Data Points**: The jittered points ensure that all observations are visible, mitigating issues of overplotting.

Despite the potential for visual clutter, this graph's rich detail makes it highly informative for audiences familiar with such complex visualizations. Therefore, the Violin Plot is the optimal choice for in-depth analysis and presentation of the Morley dataset's measured speeds across different experiments, balancing visual appeal with comprehensive data representation.
